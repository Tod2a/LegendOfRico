@using LegendOfRico.Data
@using BootstrapBlazor

<div class="layoutGame" @onkeydown="HandleKeyDown" @onkeydown:preventDefault=true tabindex="0">
    <div class="displayGame">
        <GameMenu Game="Game" TypeOfShowChange="TypeOfShowChange" />
        <div class="mapDisplay">
            <table border="1" class="Map">
                @for (int i = Game.GameMap.StartI; i < Game.GameMap.MaxI; i++)
                {
                    <tr>
                        @for (int j = Game.GameMap.StartJ; j < Game.GameMap.MaxJ; j++)
                        {
                            @if (i == Game.Player.PositionI && j == Game.Player.PositionJ)
                            {
                                <td>
                                    <div style="background-image: url('@Game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');">
                                        <img src="@Game.Player.MapSprite" alt="Image Player" class="character-image">
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div style="background-image: url('@Game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');"></div>
                                </td>
                            }

                        }
                    </tr>
                }
            </table>
        </div>
        <div class="mapMenu">
            <p style="display: @(Game.ShowInventory ? "block" : "none")">
                <p>Inventaire consommables:</p>
                @foreach(var item in Game.Player.ConsumableInventory)
                {
                    @if (item.Quantity > 0)
                    {
                        <p>@item.ItemName ( @item.Quantity ) <button @onclick="() => item.Use(Game)">Use</button> </p>
                    }
                }
                <p>Inventaire Stuff:</p>
                @foreach (var item in Game.Player.StuffInventory)
                {
                    <p data-toggle="tooltip" data-placement="top" title="@item.Description">
                        @item.ItemName
                        @if (Game.Player.CanEquip(item))
                        {
                            <button  @onclick="() => Game.Player.EquipStuff(item)">Equiper</button>
                        }
                    </p>
                }
            </p>
            <p style="display: @(Game.ShowQuestList ? "block" : "none")">ici liste des quetes</p>
        </div>
    </div>
</div>



@code {

    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }

   


    //Fonction de gestion des bouton clavier
    private void HandleKeyDown(KeyboardEventArgs e)
    {

        switch (e.Key)
        {
            case "ArrowLeft":
                Game.GoLeft(Game);
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowRight":
                Game.GoRight(Game);
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowUp":
                Game.GoUp(Game);
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowDown":
                Game.GoDown(Game);
                TypeOfShowChange.InvokeAsync();
                break;
        }
        Game.GameMap.UpdateMapDisplay(Game.Player);
    }

}
