@using LegendOfRico.Data
@using BootstrapBlazor

<!--Composant affichant la carte du jeu-->
<div class="layoutGame" @onkeydown="HandleKeyDown" @onkeydown:preventDefault=true>
    <div class="displayGame">
        <!--Affichage du composant du menu de jeu classique-->
        <GameMenu Game="Game" TypeOfShowChange="TypeOfShowChange" />
        <div class="mapDisplay">
            <!--Affichage de la map, tableau classique avec une double boucle imbriquée pour afficher les squares-->
            <table border="1" class="Map" @ref="mapref" tabindex="0" autofocus>
                @for (int i = Game.GameMap.StartI; i < Game.GameMap.MaxI; i++)
                {
                    <tr>
                        @for (int j = Game.GameMap.StartJ; j < Game.GameMap.MaxJ; j++)
                        {
                            @if (i == Game.Player.PositionI && j == Game.Player.PositionJ)
                            {
                                <td>
                                    <div style="background-image: url('@Game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');">
                                        <img src="@Game.Player.MapSprite" alt="Image Player" class="character-image">
                                    </div>
                                </td>
                            }
                            else if (Game.GameMap.MapLayout[i][j].IsACollectDestination)
                            {
                                <td>
                                    <div style="background-image: url('@Game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');">
                                        <img src="img/Collect/etoile.png" alt="Image Cible" class="character-image">
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div style="background-image: url('@Game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');"></div>
                                </td>
                            }

                        }
                    </tr>
                }
            </table>
        </div>
        <!--Menu de droite propre à la carte-->
        <div class="mapMenu">
            <!--Affichage de l'inventaire-->
            @if(Game.ShowInventory)
            {
                <p>Inventaire consommables:</p>
                @foreach(var item in Game.Player.ConsumableInventory)
                {
                    @if (item.Quantity > 0)
                    {
                        <p data-toggle="tooltip" data-placement="top" title="@item.Description">
                            @item.ItemName ( @item.Quantity ) 
                            @if (item.CanBeUsedOutOfFight)
                                {
                                    <button @onclick="() => UseConsumable(item, Game.Player)">Use</button> 
                                
                                }
                            @if (item.CanBeUsedOnMate && Game.Player.PartyMember != null)
                            {
                            <button @onclick="() => UseConsumable(item, Game.Player.PartyMember)">Use pour @Game.Player.PartyMember.Name</button>
                            }
                        </p>
                     }
                }
                <p>Inventaire Stuff:</p>
                @foreach (var item in Game.Player.StuffInventory)
                {
                    <p data-toggle="tooltip" data-placement="top" title="@item.Description">
                        @item.ItemName
                        @if (Game.Player.CanEquip(item))
                        {
                            <button  @onclick="() => Game.Player.EquipStuff(item)">Equiper</button>
                        }
                    </p>
                }
            }
            <!--Affichage de la liste de quêtes-->
            @if (Game.ShowQuestList)
            {
                <div class="bossTarget">
                    <p>JoyBean Vaincu: @if (Game.Player.Joydead) {<img src="img/layout/valide.png" /> } else {<img src="img/layout/croix.png" />}</p>
                    <p>Scorpion Vaincu: @if (Game.Player.Scorpiodead) {<img src="img/layout/valide.png" /> } else {<img src="img/layout/croix.png" />}</p>
                    <p>Chef Tontaton Vaincu: @if (Game.Player.Tontatondead) {<img src="img/layout/valide.png" /> } else {<img src="img/layout/croix.png" />}</p>
                    <p>Sun Wukong Vaincu: @if (Game.Player.Wukongdead) {<img src="img/layout/valide.png" /> } else {<img src="img/layout/croix.png" />}</p>
                </div>
                <p class="questTitle">Liste de quêtes:</p>
                @foreach(var quest in Game.Player.QuestsBook)
                {
                <p data-toggle="tooltip" data-placement="top" title="@quest.Description" class="questTaget">
                    @quest.QuestName 
                        @if (quest.Status) {<button @onclick="() => Game.ValidQuest(quest)">Valider</button>}
                    </p>
                }
            }
            <!--Affichage du donneur de quêtes-->
            @if (Game.ShowQuestGiver)
            {
                <p>@Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].MisterQuest.NPCName :</p>
                @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].MisterQuest.Quests.Count == 0)
                {
                    <p>Je n'ai pas de quêtes à vous proposer</p>
                }
                else
                {
                    foreach (var quest in Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].MisterQuest.Quests)
                    {
                        <p data-toggle="tooltip" data-placement="top" title="@quest.Description" class="questTaget">
                            @quest.QuestName
                            <button @onclick="() => TakeQuest(quest)">Valider</button>                            
                    </p>
                    }
                }
            }
        </div>
    </div>
</div>



@code {

    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }
    public ElementReference mapref;

    void UseConsumable(Consumable consumable, Character target)
    {
        Game.UseConsumable(consumable, target);
        Game.GameMap.UpdateMapDisplay(Game.Player);
        TypeOfShowChange.InvokeAsync();
    }

    void TakeQuest(Quest quest)
    {
        Game.TakeQuest(quest);
        TypeOfShowChange.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await mapref.FocusAsync();
    }

    //Fonction de gestion des bouton clavier
    private void HandleKeyDown(KeyboardEventArgs e)
    {

        switch (e.Key)
        {
            case "ArrowLeft":
                Game.GoLeft();
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowRight":
                Game.GoRight();
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowUp":
                Game.GoUp();
                TypeOfShowChange.InvokeAsync();
                break;
            case "ArrowDown":
                Game.GoDown();
                TypeOfShowChange.InvokeAsync();
                break;
        }
        Game.GameMap.UpdateMapDisplay(Game.Player);
    }

}
