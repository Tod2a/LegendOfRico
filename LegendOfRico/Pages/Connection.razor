@using LegendOfRico.Data
@using System.Text.Json
@inject IJSRuntime JS

<!--Composant de connexion, affiché à l'ouverture du jeu-->
<h1 class="gameTitle">The legend of Rico</h1>
<div class="displayGame">
    <!--Menu de gauche, utilisation d'un formulaire avec un model à suivre pour créer un personnage-->
    <div class="gameMenu">
        <EditForm Model="@characterModel" OnValidSubmit="CreateCharacter">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>Nom du personnage</label>
            <InputText @bind-Value="characterModel.CharacterName" />
            <label>Type de personnage</label>

            <select @bind="characterModel.SelectedType" class="form-control">
                @foreach (var option in Enum.GetValues(typeof(TypeOfCharacter)))
                {
                    <option value="@option">@option.ToString()</option>
                }
            </select>
            <button type="submit">Créer</button>
        </EditForm>
        <button @onclick="Continuer">Continuer</button>
        <p>@ContinueMessage</p>
    </div>
    <!--Message d'introduction du jeu-->
    <div class="intro">
        <h2>Bienvenue dans le monde mystique de Ricochico</h2>
        <p>Explorez ce royaume enchanteur où une aventure épique attend les courageux aventuriers. Au cœur de ce monde fantastique, le grand Ricochico, gardien légendaire, détient la clé d'une relique ancienne renfermant un pouvoir immense.</p>

        <p>Cette relique sacrée est divisée en quatre parties, chacune gardée par un puissant boss :</p>
        <ul>
            <li>Sun Wukong, le roi singe, dans la mystérieuse forêt de Sherloop.</li>
            <li>Le Scorpion Éternel, gardien énigmatique de la Dune Éternelle.</li>
            <li>Cher Tontaton, revenu d'entre les ombres, au Cimetière des Tontaton.</li>
            <li>Joy Bean, maître des rêves, dans l'ancienne cité de Joy Bean.</li>
        </ul>

        <p>Forgez votre destinée, brave aventurier, et dévoilez les secrets de chaque territoire. Seul un héros intrépide pourra accomplir cette quête périlleuse et débloquer le pouvoir ultime nécessaire pour défier le grand Ricochico.</p>

        <p>Que l'aventure commence, et que la légende de Ricochico s'écrive à travers vos exploits audacieux !</p>
    </div>
</div>

@code {
    private CharacterModel characterModel = new CharacterModel();

    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }
    public string ContinueMessage { get; set; }

    //Fonction de création du personnage
    private void CreateCharacter()
    {
        //on recrée une nouvelle map car si on à joué avec un autre personnage il faut que tout soit remis à zéro
        Game.GameMap = new Data.Map();
        Game.CreateCharacter(characterModel.CharacterName, characterModel.SelectedType);
        Game.FormShow = TypeOfShow.Map;
        Game.GameMap.UpdateMapDisplay(Game.Player);
        TypeOfShowChange.InvokeAsync();
    }


    //Fonction continuer à développer soon
    async Task Continuer()
    {
        var value = await JS.InvokeAsync<string>("localStorage.getItem", "Saving");

        if (value != null)
        {
            ContinueMessage = "";
            Saving save = JsonSerializer.Deserialize<Saving>(value);

            Game.Player = GetLoadCharacter(save);
            Game.GameMap = new Data.Map();
            Game.Player.Name = save.PlayerSaving.CharactName;
            while(Game.Player.Level < save.PlayerSaving.CharactLevel)
            {
                Game.Player.CurrentXp = Game.Player.XpToLevel;
                Game.LevelUp(Game.Player);
            }
            Game.Player.CurrentXp = save.PlayerSaving.CharactXp;
            Game.Player.CurrentHitPoints = save.PlayerSaving.CharactHp;
            Game.Player.SetCoins(save.PlayerSaving.CharactCoins-10);
            Game.Player.PositionI = save.PlayerSaving.PositionI;
            Game.Player.PositionJ = save.PlayerSaving.PositionJ;
            Game.Player.Joydead = save.PlayerSaving.JoyDead;
            Game.Player.Wukongdead = save.PlayerSaving.WukongDead;
            Game.Player.Tontatondead = save.PlayerSaving.TontaDead;
            Game.Player.Scorpiodead = save.PlayerSaving.ScorpioDead;
            Game.Player.RicoDead = save.PlayerSaving.RicoDead;
            if (save.PlayerSaving.MateName != null)
            {
                foreach (var mates in Game.Tavernist.CharactersToRecruit)
                {
                    if (mates.Name == save.PlayerSaving.MateName)
                    {
                        Game.Player.SetCoins(mates.RecruitingPrice);
                        Game.Recrut(mates);
                    }
                }
                Game.Player.PartyMember.CurrentHitPoints = save.PlayerSaving.MateHp;
            }
            if(Game.Player.GetType() == typeof(Ranger))
            {
                Game.Player.Pet = GetLoadPet(save);
            }
            GetLoadSutff(save);
            CheckBossVictory(Game.Player);
            LoadConsumableInventory(save);
            Game.GameMap.UpdateMapDisplay(Game.Player);
            Game.FormShow = TypeOfShow.Map;
            TypeOfShowChange.InvokeAsync();
        }
        else
        {
            ContinueMessage = "Pas de sauvegarde accessible";
        }

    }

    private Character GetLoadCharacter (Saving save)
    {
        if (save.PlayerSaving.CharactType == "ranger")
        {
            return new Ranger() { MapSprite = "img/character/spriteRanger.png" };
        }
        else if (save.PlayerSaving.CharactType == "cleric")
        {
            return new Cleric() { MapSprite = "img/character/spriteCleric.png" };
        }
        else if (save.PlayerSaving.CharactType == "fighter")
        {
            return new Fighter() { MapSprite = "img/character/spriteFighter.png" };
        }
        else if (save.PlayerSaving.CharactType == "rogue")
        {
            return new Rogue() { MapSprite = "img/character/spriteRogue.png" };
        }
        else
        {
            return new Wizard() { MapSprite = "img/character/spriteWizard.png" };
        }
    }

    private void GetLoadSutff (Saving save)
    {
        foreach(var item in save.ItemList)
        {
            if (item.ItemName == "Armure divine")
            {
                if (item.IsEquip)
                {
                    Game.Player.EquipStuff(new Armor("Armure divine", "Armure : 45", 10000, TypeOfArmor.Light, 45));
                }
                else
                {
                    Game.Player.StuffInventory.Add(new Armor("Armure divine", "Armure : 45", 10000, TypeOfArmor.Light, 45));
                }
            }
            else
            {
                foreach (var merchantstuff in Game.Merchant.StuffStock)
                {
                    if (item.ItemName == merchantstuff.ItemName)
                    {
                        Game.Player.StuffInventory.Add(merchantstuff);
                        if (item.IsEquip)
                        {
                            Game.Player.EquipStuff(merchantstuff);
                        }
                    }
                }
            }
        }
    }

    private void CheckBossVictory (Character player)
    {
        if(player.Wukongdead)
        {
            Game.GameMap.MapLayout[72][53].ChanceToTriggerFight = 0.0;
        }
        if (player.Tontatondead)
        {
            Game.GameMap.MapLayout[36][401].ChanceToTriggerFight = 0.0;
        }
        if (player.Joydead)
        {
            Game.GameMap.MapLayout[428][58].ChanceToTriggerFight = 0.0;
        }
        if (player.Scorpiodead)
        {
            Game.GameMap.MapLayout[499][499].ChanceToTriggerFight = 0.0;
        }
        if (player.RicoDead)
        {
            Game.GameMap.MapLayout[246][250].ChanceToTriggerFight = 0.0;
        }
    }

    private void LoadConsumableInventory(Saving save)
    {
        int count = 0;
        foreach (var item in Game.Player.ConsumableInventory)
        {
            item.Quantity = save.ConsumableQuantity[count];
            count++;
        }
    }

    private Beast GetLoadPet (Saving save)
    {
        switch (save.PlayerSaving.PetType)
        {
            case "rottweiler":
                return new Rottweiler();
            case "americanstaff":
                return new Americanstaff();
            case "nosaffraid":
                return new Nosaffraid();
            case "nosptipti":
                return new Nosptipti();
            case "nosalto":
                return new Nosalto();
            case "emperorscorpio":
                return new EmperorScorpio();
            case "littlescorpio":
                return new LittleScorpio();
            case "rockscorpio":
                return new RockScorpio();
            case "aragog":
                return new Aragog();
            case "bigsonofaragog":
                return new BigSonOfAragog();
            case "sonofaragog":
                return new SonOfAragog();
            case "alphawolf":
                return new AlphaWolf();
            case "betawolf":
                return new BetaWolf();
            case "omegawolf":
                return new OmegaWolf();
            default:
                return new Bulldog();
        }
    }
}
