@using LegendOfRico.Data
@using System.Text.Json
@inject IJSRuntime JS

<!--Composant utilisé dans la pluspart des pages, affiche le menu de gauche du jeu-->
<div class="gameMenu">
    @if(Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].IsACollectDestination && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="StartCollect">Collecter</button>
    }
    @if (Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Demo">Démo</button>
    }
    <p>Personnage: @Game.Player.Name</p>
    <p>Position: [@Game.Player.PositionI][@Game.Player.PositionJ]@Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].Name</p>
    <p>Niveau: @Game.Player.Level</p>
    <p>
        @Game.Player.Name HP: @Game.Player.GetHpDisplay()
        @if(Game.Player.IsBurning)
        {
            <img src="img/layout/flamme.png" alt="Brule" />
        }
        @if (Game.Player.IsPoisoned)
        {
            <img src="img/layout/poisoned.png" alt="Poison" />
        }
    </p>
    @if (Game.Player.PartyMember != null)
    {
        <p>
            @Game.Player.PartyMember.Name HP: @Game.Player.PartyMember.GetHpDisplay()
            @if (Game.Player.PartyMember.IsBurning)
            {
                <img src="img/layout/flamme.png" alt="Brule" />
            }
            @if (Game.Player.PartyMember.IsPoisoned)
            {
                <img src="img/layout/poisoned.png" alt="Poison" />
            }
        </p>
    }
    <p>@Game.Player.GetStatsDisplay()</p>
    <p>Expérience: @Game.Player.GetXpDisplay()</p>
    <p>Argent: @Game.Player.Coins</p>
    <!--Affichage de l'arme équipée avec ses stats en mouseover-->
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterWeapon.Description">
        Arme: @Game.Player.CharacterWeapon.ItemName
        @if (!(Game.Player.CharacterWeapon.GetType() == typeof(Fist)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=UnequipWeapon>Déséquiper</button>
        }
    </p>
    <!--affichage de l'armure équipée avec ses stats en mouseover-->
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterArmor.Description">
        Armure: @Game.Player.CharacterArmor.ItemName
        @if (!(Game.Player.CharacterArmor.GetType() == typeof(Topless)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=UnequipArmor>Déséquiper</button>
        }
    </p>
    <!--afficahge du bouclier avec ses stats en mouseover-->
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterShield.Description">
        Bouclier: @Game.Player.CharacterShield.ItemName
        @if (!(Game.Player.CharacterShield.GetType() == typeof(FistShield)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=UnequipShield>Déséquiper</button>
        }
    </p>
    @if ((Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].SquareBiome.BiomeType == TypeOfBiome.Village || Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].SquareBiome.BiomeType == TypeOfBiome.VillageBoss) && !Game.Player.IsRested)
    {
        <button @onclick="Game.PartyRest">Se reposer</button>
    }
    @if(Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="ShowInventory">Inventaire</button>
        <button @onclick="ShowQuest">Liste des quêtes</button>
        @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasQuestTarget == true)
        {
            <button @onclick="ShowQuestGiver">Donneur de quêtes</button>
        }
    }
    @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasNPC == true && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Merch">Marchand</button>
    }
    @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasNPC == true && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Tavern">Taverne</button>
    }
    @if (Game.FormShow == TypeOfShow.Merchant || Game.FormShow == TypeOfShow.Tavern)
    {
        <button @onclick="Leave">Quitter</button>
    }
    @if (Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Save">Sauvegarde</button>
    }
    <button @onclick="Deconnection">Deconnexion</button>
</div>

@code {
    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }

    //Gestion de l'affichange du menu de droite
    void ShowQuest ()
    {
        Game.SwitchShowQuestList();
        TypeOfShowChange.InvokeAsync();
    }

    void ShowInventory ()
    {
        Game.SwitchShowInventoryList();
        TypeOfShowChange.InvokeAsync();
    }

    void ShowQuestGiver ()
    {
        Game.SwitchShowQuestGiver();
        TypeOfShowChange.InvokeAsync();
    }

    //Fonction qui va activer la quête de collecte
    void StartCollect ()
    {
        Game.Player.SetCollectQuest();
        Game.Player.CollectQuest.DisplayMap();
        Game.FormShow = TypeOfShow.Collect;
        TypeOfShowChange.InvokeAsync();
    }

    //Gestion du déséquipement du stuff
    void UnequipWeapon ()
    {
        Game.Player.UnequipWeapon();
        TypeOfShowChange.InvokeAsync();
    }

    void UnequipArmor ()
    {
        Game.Player.UnequipArmor();
        TypeOfShowChange.InvokeAsync();
    }

    void UnequipShield ()
    {
        Game.Player.UnequipShield();
        TypeOfShowChange.InvokeAsync();
    }

    void Deconnection()
    {
        Game.Deconnection();
        TypeOfShowChange.InvokeAsync();
    }

    //Gestion de l'affichage du marchand et de la taverne
    void Merch()
    {
        Game.FormShow = TypeOfShow.Merchant;
        TypeOfShowChange.InvokeAsync();
    }

    void Tavern()
    {
        Game.FormShow = TypeOfShow.Tavern;
        TypeOfShowChange.InvokeAsync();
    }

    void Leave()
    {
        Game.FormShow = TypeOfShow.Map;
        TypeOfShowChange.InvokeAsync();
    }

    //Fonction de sauvegarde
    async Task Save()
    {
        Saving save = new Saving(Game.Player);
        var saving = JsonSerializer.Serialize(save);
        await JS.InvokeVoidAsync("localStorage.setItem", "SavingType", saving);
        var player = JsonSerializer.Serialize(Game.Player);
        await JS.InvokeVoidAsync("localStorage.setItem", "SavingPlayer", player);
        Game.FormShow = TypeOfShow.Connection;
        TypeOfShowChange.InvokeAsync();
    }


    //Affichage du menu de démo, pas nécessaire au jeu de base
    void Demo()
    {
        Game.SwitchShowDemo();
        TypeOfShowChange.InvokeAsync();
    }
    
}
