@using LegendOfRico.Data

<div class="gameMenu">
    @if(Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].IsACollectDestination && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="StartCollect">Collecter</button>
    }
    <!--<button @onclick="cheat">Cheat</button>-->
    <!--<p><button @onclick="tp">Téléportation</button></p>-->
    <button @onclick="Lvl">Lvlup</button>
    <p>Personnage: @Game.Player.Name</p>
    <p>Position: [@Game.Player.PositionI][@Game.Player.PositionJ]@Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].Name</p>
    <p>Niveau: @Game.Player.Level</p>
    <p>@Game.Player.Name HP: @Game.Player.GetHpDisplay()</p>
    @if (Game.Player.PartyMember != null)
    {
        <p>@Game.Player.PartyMember.Name HP: @Game.Player.PartyMember.GetHpDisplay()</p>
    }
    <p>@Game.Player.GetStatsDisplay()</p>
    <p>Expérience: @Game.Player.GetXpDisplay()</p>
    <p>Argent: @Game.Player.Coins</p>
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterWeapon.Description">
        Arme: @Game.Player.CharacterWeapon.ItemName
        @if (!(Game.Player.CharacterWeapon.GetType() == typeof(Fist)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=Game.Player.UnequipWeapon>Déséquiper</button>
        }
    </p>
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterArmor.Description">
        Armure: @Game.Player.CharacterArmor.ItemName
        @if (!(Game.Player.CharacterArmor.GetType() == typeof(Topless)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=Game.Player.UnequipArmor>Déséquiper</button>
        }
    </p>
    <p data-toggle="tooltip" data-placement="top" title="@Game.Player.CharacterShield.Description">
        Bouclier: @Game.Player.CharacterShield.ItemName
        @if (!(Game.Player.CharacterShield.GetType() == typeof(FistShield)) && Game.FormShow != TypeOfShow.Fight)
        {
            <button @onclick=Game.Player.UnequipShield>Déséquiper</button>
        }
    </p>
    @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].SquareBiome.BiomeType == TypeOfBiome.Village && !Game.Player.IsRested)
    {
        <button @onclick="Game.PartyRest">Se reposer</button>
    }
    @if(Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="ShowInventory">Inventaire</button>
        <button @onclick="ShowQuest">Liste des quêtes</button>
        @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasQuestTarget == true)
        {
            <button @onclick="ShowQuestGiver">Donneur de quêtes</button>
        }
    }
    
    @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasNPC == true && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Merch">Marchand</button>
    }
    @if (Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].HasNPC == true && Game.FormShow == TypeOfShow.Map)
    {
        <button @onclick="Tavern">Taverne</button>
    }
    @if (Game.FormShow == TypeOfShow.Merchant || Game.FormShow == TypeOfShow.Tavern)
    {
        <button @onclick="Leave">Quitter</button>
    }
    <!--<button onclick="() => Save(game.Player)">Sauvegarde</button>-->
    <button @onclick="Deconnection">Deconnexion</button>
</div>

@code {
    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }

    void ShowQuest ()
    {
        Game.SwitchShowQuestList();
        TypeOfShowChange.InvokeAsync();
    }

    void ShowInventory ()
    {
        Game.SwitchShowInventoryList();
        TypeOfShowChange.InvokeAsync();
    }

    void ShowQuestGiver ()
    {
        Game.SwitchShowQuestGiver();
        TypeOfShowChange.InvokeAsync();
    }

    void StartCollect ()
    {
        Game.Player.SetCollectQuest();
        Game.Player.CollectQuest.DisplayMap();
        Game.FormShow = TypeOfShow.Collect;
        TypeOfShowChange.InvokeAsync();
    }

    void Deconnection()
    {
        Game.Deconnection();
        TypeOfShowChange.InvokeAsync();
    }

    void Merch()
    {
        Game.FormShow = TypeOfShow.Merchant;
        TypeOfShowChange.InvokeAsync();
    }

    void Tavern()
    {
        Game.FormShow = TypeOfShow.Tavern;
        TypeOfShowChange.InvokeAsync();
    }

    void Leave()
    {
        Game.FormShow = TypeOfShow.Map;
        TypeOfShowChange.InvokeAsync();
    }

    //bouton pour rendre RicoChico vulnérable si besoin
    void cheat()
    {
        Game.Player.Wukongdead = true;
        Game.Player.Tontatondead = true;
        Game.Player.Scorpiodead = true;
        Game.Player.Joydead = true;
        TypeOfShowChange.InvokeAsync();
    }

    //Bouton de téléportation pour tester des fonctions qu'on implémente
    //il suffit de changer les coordonées dont vous avez besoin
    void tp()
    {
        Game.Player.PositionI = 498;
        Game.Player.PositionJ = 499;
        Game.GameMap.UpdateMapDisplay(Game.Player);
        TypeOfShowChange.InvokeAsync();
    }

    //fonction de cheat lvl up si besoin pour les tests
    void Lvl()
    {
        Game.Player.CurrentXp = Game.Player.XpToLevel;
        Game.LevelUp(Game.Player);
    }
}
