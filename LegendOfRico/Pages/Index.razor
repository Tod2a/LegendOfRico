@page "/"
@using LegendOfRico.Data
@using System.Text.Json
@inject IJSRuntime JS



<PageTitle>The legend of Rico</PageTitle>
@if (Game.FormShow == TypeOfShow.Connection)
{
    <Connection Game="Game" TypeOfShowChange="StateHasChanged"/>
} 
else if (Game.FormShow == TypeOfShow.Map)
{
    <Map Game="Game" TypeOfShowChange="StateHasChanged"/>
}
else if (Game.FormShow == TypeOfShow.Fight)
{
    <Fight Game="Game" TypeOfShowChange="StateHasChanged"/>
}
else if (Game.FormShow == TypeOfShow.Merchant)
{
    <Merchant Game="Game" TypeOfShowChange="StateHasChanged" />
}
else if (Game.FormShow == TypeOfShow.Tavern)
{
    <Tavern Game="Game" TypeOfShowChange="StateHasChanged"></Tavern>
}
else if (Game.FormShow == TypeOfShow.Collect)
{
    <Collect Game="Game" TypeOfShowChange="StateHasChanged"/>
}

@code{
    private CharacterModel characterModel = new CharacterModel();
    //creation du jeu
    public Game Game = new Game { };



    //modification de la fonction de blazor pour ajouter l'update de l'affichage de la map en fonctiond de l'emplacement du personnage

    protected override void OnInitialized()
    {
        Game.GameMap.UpdateMapDisplay(Game.Player);

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSavings();

        await base.OnInitializedAsync();
    }

    async Task GetSavings()
    {
        var value = await JS.InvokeAsync<string>("localStorage.getItem", "Saving");
        if (value != null)
        {
            List<Saving> savings = JsonSerializer.Deserialize<List<Saving>>(value);
            foreach (var save in savings)
            {
                Game.Savings.Add(save);
                Game.GameId++;
            }
        }
    }


    
}