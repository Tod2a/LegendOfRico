@page "/"
@using LegendOfRico.Data
@using Microsoft.JSInterop
@using System.Text.Json
@inject IJSRuntime JSRuntime


<PageTitle>The legend of Rico</PageTitle>
<h1 class="gameTitle">The legend of Rico</h1>
@if (game.FormShow == TypeOfShow.Connection)
{
    <div class="displayGame">
        <div class="gameMenu">
            <EditForm Model="@characterModel" OnValidSubmit="CreateCharacter">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Nom du personnage</label>
                <InputText @bind-Value="characterModel.CharacterName" />
                <label>Type de personnage</label>

                <select @bind="characterModel.SelectedType" class="form-control">
                    @foreach (var option in Enum.GetValues(typeof(TypeOfCharacter)))
                    {
                        <option value="@option">@option.ToString()</option>
                    }
                </select>
                <button type="submit">Créer</button>
            </EditForm>
        </div>
        <div class="intro">
            <h2>Bienvenue dans le monde mystique de Ricochico</h2>
            <p>Explorez ce royaume enchanteur où une aventure épique attend les courageux aventuriers. Au cœur de ce monde fantastique, le grand Ricochico, gardien légendaire, détient la clé d'une relique ancienne renfermant un pouvoir immense.</p>

            <p>Cette relique sacrée est divisée en quatre parties, chacune gardée par un puissant boss :</p>
            <ul>
                <li>Sun Wukong, le roi singe, dans la mystérieuse forêt de Sherloop.</li>
                <li>Le Scorpion Éternel, gardien énigmatique de la Dune Éternelle.</li>
                <li>Le chef Tontaton, revenu d'entre les ombres, au Cimetière des Tontaton.</li>
                <li>Joy Bean, maître des rêves, dans l'ancienne cité de Joy Bean.</li>
            </ul>

            <p>Forgez votre destinée, brave aventurier, et dévoilez les secrets de chaque territoire. Seul un héros intrépide pourra accomplir cette quête périlleuse et débloquer le pouvoir ultime nécessaire pour défier le grand Ricochico.</p>

            <p>Que l'aventure commence, et que la légende de Ricochico s'écrive à travers vos exploits audacieux !</p>
        </div>
    </div>
} 
else if (game.FormShow == TypeOfShow.Map)
{
    <div class="layoutGame" @onkeydown="HandleKeyDown" @onkeydown:preventDefault=true tabindex="0">
    <div class="displayGame">
        <div class="gameMenu">
        <p>Personnage: @game.Player.Name</p>
        <p>Position: [@game.Player.PositionI][@game.Player.PositionJ]@game.GameMap.MapLayout[game.Player.PositionI][game.Player.PositionJ].Name</p>
        <button @onclick="() => Game.SwitchShowInventoryList(game)">Inventaire</button>
        <button @onclick="() => Game.SwitchShowQuestList(game)">Liste des quêtes</button>
                @if (game.GameMap.MapLayout[game.Player.PositionI][game.Player.PositionJ].HasNPC == true)
                {
                    <button @onclick="() => Game.SwitchShowMerchantList(game)">Marchand</button>
                }
                <!--<button onclick="() => Save(game.Player)">Sauvegarde</button>-->
        <button @onclick="() => Game.Deconnection(game)">Deconnexion</button>
        </div>
        <div class="mapDisplay">
        <table border="1" class="Map">
            @for(int i = game.GameMap.StartI; i < game.GameMap.MaxI; i++)
            {
                <tr>
                @for (int j = game.GameMap.StartJ; j < game.GameMap.MaxJ; j++)
                {
                    @if (i == game.Player.PositionI && j == game.Player.PositionJ)
                    {
                        <td>
                            <div style="background-image: url('@game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');">
                                <img src="@game.Player.MapSprite" alt="Image Player" class="character-image">
                            </div>
                        </td>
                    }
                    else
                    {
                        <td>
                            <div style="background-image: url('@game.GameMap.MapLayout[i][j].SquareBiome.ImageUrl');"></div>
                        </td>
                    }
                   
                }
                </tr>
            }
        </table>
        </div>
        <div class="mapMenu">
                <p style="display: @(game.ShowInventory ? "block" : "none")">ici inventaire</p>
                <p style="display: @(game.ShowQuestList ? "block" : "none")">ici liste des quetes</p>
                <p style="display: @(game.ShowMerchantList ? "block" : "none")">ici marchand</p>
        </div>
    </div>
    </div>
}
else if (game.FormShow == TypeOfShow.Fight)
{
    <div class="displayGame">
        <div class="gameMenu">
            <button @onclick="() => Game.FightWin(game)">Autowin</button>
        </div>
        <div class="fight" >
            <div class="fightDisplay" style="background-image: url('@game.GameMap.MapLayout[game.Player.PositionI][game.Player.PositionJ].SquareBiome.FightUrl');">
                <div class="opponent">
                    <img class="sprite" src="@game.MonsterFight.fightImgUrl" alt="Image fight Monster">
                </div>
                <div class="player">
                    <img class="sprite" src="@game.Player.fightImgUrl" alt="Image fight Player">
                </div>
        </div>
            <div class="fightMenu">
                <div class="actions">
                    @if (game.ShowFightSpells)
                    {
                        @foreach(var spell in game.Player.SpellBook)
                        {
                            <button>@spell.SpellName</button>
                        }
                        <button @onclick="() => Game.SwitchFightInventory(game)">go to inventaire</button>
                    }
                    else if (game.ShowFightInventory)
                    {
                        <button>Inventaire</button>
                        <button @onclick="() => Game.SwitchFightSpells(game)">go to spells</button>
                    }

                
                </div>
            </div>
        </div>

    </div>
}

@code{
    private CharacterModel characterModel = new CharacterModel();
    //creation du jeu
    public Game game = new Game { };

    


    private void CreateCharacter()
    {
        game.CreateCharacter(characterModel.CharacterName, characterModel.SelectedType);
        game.GameMap.UpdateMapDisplay(game.Player);
    }

    
          
    //modification de la fonction de blazor pour ajouter l'update de l'affichage de la map en fonctiond de l'emplacement du personnage

    protected override void OnInitialized()
    {
        game.GameMap.UpdateMapDisplay(game.Player);

        base.OnInitialized();
    }

    //Fonction de gestion des bouton clavier
    private void HandleKeyDown(KeyboardEventArgs e)
    {

        switch (e.Key)
        {
            case "ArrowLeft":
                game.GoLeft(game);
                break;
            case "ArrowRight":
                game.GoRight(game);
                break;
            case "ArrowUp":
                game.GoUp(game);
                break;
            case "ArrowDown":
                game.GoDown(game);
                break;
        }
        game.GameMap.UpdateMapDisplay(game.Player);
    }

    

 
    
}