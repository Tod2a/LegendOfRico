@page "/"
@using LegendOfRico.Data

<PageTitle>The legend of Rico</PageTitle>
<div @onkeydown="HandleKeyDown" @onkeydown:preventDefault=true tabindex="0">
<h1 class="gameTitle">The legend of Rico</h1>
<div class="displayGame">
    <div class="gameMenu">
    <p>Personnage: @PersoTest.Name</p>
    <p>Position: [@PersoTest.PositionI][@PersoTest.PositionJ]@gameMap.MapLayout[PersoTest.PositionI][PersoTest.PositionJ].Name</p>
    </div>
    <div class="mapDisplay">
    <table border="1" class="Map">
        @for(int i = gameMap.StartI; i < gameMap.MaxI; i++)
        {
            <tr>
            @for (int j = gameMap.StartJ; j < gameMap.MaxJ; j++)
            {
                @if (i == PersoTest.PositionI && j == PersoTest.PositionJ)
                {
                    <td>
                        <div style="background-image: url('@gameMap.MapLayout[i][j].SquareBiome.ImageUrl');">
                            <img src="@PersoTest.MapSprite" alt="Image PersoTest" class="character-image">
                        </div>
                    </td>
                }
                else
                {
                    <td>
                        <div style="background-image: url('@gameMap.MapLayout[i][j].SquareBiome.ImageUrl');"></div>
                    </td>
                }
               
            }
            </tr>
        }
    </table>
    </div>
</div>
</div>

@code{
    //création d'un personnage test pour la map, création et gestion des personnages encore à définir
    public static Wizard PersoTest = new Wizard {Name = "Destructor", MapSprite = "img/character/test.jpg" };

    protected override void OnInitialized()
    {
        gameMap.UpdateMapDisplay(PersoTest);

        base.OnInitialized();
    }

    //Fonction de gestion des bouton clavier
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        
        switch (e.Key)
        {
            case "ArrowLeft":
                PersoTest.GoLeft();
                break;
            case "ArrowRight":
                PersoTest.GoRight();
                break;
            case "ArrowUp":
                PersoTest.GoUp();
                break;
            case "ArrowDown":
                PersoTest.GoDown();
                break;
        }
        gameMap.UpdateMapDisplay(PersoTest);
    }

    //création des monstres
    public static Undead skeleton = new Undead{Name = "Skeleton" };


    // création des pool de monstres
    public static Undead[] poolOfGraveyardTest = { skeleton, skeleton };


    //création des différents Biomes

    public static Biomes forest = new Biomes { BiomeType = TypeOfBiome.Forest, MonsterPool = poolOfGraveyardTest, ImageUrl = "img/biomes/foret.jpg" };
    public static Biomes desert = new Biomes { BiomeType = TypeOfBiome.Desert, MonsterPool = poolOfGraveyardTest, ImageUrl = "img/biomes/desert.jpg" };
    public static Biomes village = new Biomes { BiomeType = TypeOfBiome.Village, MonsterPool = poolOfGraveyardTest, ImageUrl = "img/biomes/village.jpg" };
    public static Biomes ruinedVillage = new Biomes { BiomeType = TypeOfBiome.AbandonedVillage, MonsterPool = poolOfGraveyardTest, ImageUrl = "img/biomes/ruine.jpg" };
    public static Biomes graveyard = new Biomes { BiomeType = TypeOfBiome.Graveyard, MonsterPool = poolOfGraveyardTest, ImageUrl = "img/biomes/cimetiere.jpg" };

    //création des squares

    public static Square classicForet = new Square { SquareBiome = forest, Name = "classicForet", ChanceToTriggerFight = 0.0, HasNPC = false, HasQuestTarget = false };
    public static Square classicDesert = new Square { SquareBiome = desert, Name = "classicDesert", ChanceToTriggerFight = 0.0, HasNPC = false, HasQuestTarget = false };
    public static Square classicVillage = new Square { SquareBiome = village, Name = "classicVillage", ChanceToTriggerFight = 0.0, HasNPC = false, HasQuestTarget = false };
    public static Square classicRuined = new Square { SquareBiome = ruinedVillage, Name = "classicRuined", ChanceToTriggerFight = 0.0, HasNPC = false, HasQuestTarget = false };
    public static Square classicGraveyard = new Square { SquareBiome = graveyard, Name = "classicGraveyard", ChanceToTriggerFight = 0.0, HasNPC = false, HasQuestTarget = false };

    //création de la map

    public Map gameMap = new Map { MapLevel = 1, MapLayout = CreateMapLayout() };

    //assignation des Squares

    private static Square[][] CreateMapLayout()
    {

        Square[][] mapLayout = new Square[20][];

        for (int i = 0; i < 20; i++)
        {
            mapLayout[i] = new Square[] { classicGraveyard, classicGraveyard, classicVillage, classicRuined, classicRuined, classicGraveyard, classicForet, classicForet, classicForet, classicGraveyard, classicGraveyard, classicGraveyard, classicVillage, classicRuined, classicRuined, classicGraveyard, classicForet, classicForet, classicForet, classicGraveyard };
        }
        //, classicGraveyard, classicGraveyard, classicVillage, classicRuined, classicRuined, classicGraveyard, classicForet, classicForet, classicForet, classicGraveyard
        return mapLayout;
       
    }
    
}