@page "/"
@using LegendOfRico.Data
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime



<PageTitle>The legend of Rico</PageTitle>
<h1 class="gameTitle">The legend of Rico</h1>
@if (game.FormShow == TypeOfShow.Connection)
{
    <Connection Game="game" TypeOfShowChange="StateHasChanged"/>
} 
else if (game.FormShow == TypeOfShow.Map)
{
    <Map Game="game" TypeOfShowChange="StateHasChanged"/>
}
else if (game.FormShow == TypeOfShow.Fight)
{
    <div class="displayGame">
        <div class="gameMenu">
            <button @onclick="() => Game.FightWin(game)">Autowin</button>
        </div>
        <div class="fight" >
            <div class="fightDisplay" style="background-image: url('@game.GameMap.MapLayout[game.Player.PositionI][game.Player.PositionJ].SquareBiome.FightUrl');">
                <div class="opponent">
                    <img class="sprite" src="@game.MonsterFight.fightImgUrl" alt="Image fight Monster">
                </div>
                <div class="player">
                    <img class="sprite" src="@game.Player.fightImgUrl" alt="Image fight Player">
                </div>
        </div>
            <div class="fightMenu">
                <div class="actions">
                    @if (game.ShowFightSpells)
                    {
                        @foreach(var spell in game.Player.SpellBook)
                        {
                            <button>@spell.SpellName</button>
                        }
                        <button @onclick="() => Game.SwitchFightInventory(game)">go to inventaire</button>
                    }
                    else if (game.ShowFightInventory)
                    {
                        <button>Inventaire</button>
                        <button @onclick="() => Game.SwitchFightSpells(game)">go to spells</button>
                    }

                
                </div>
            </div>
        </div>

    </div>
}

@code{
    private CharacterModel characterModel = new CharacterModel();
    //creation du jeu
    public Game game = new Game { };


   

    
          
    //modification de la fonction de blazor pour ajouter l'update de l'affichage de la map en fonctiond de l'emplacement du personnage

    protected override void OnInitialized()
    {
        game.GameMap.UpdateMapDisplay(game.Player);

        base.OnInitialized();
    }

    //Fonction de gestion des bouton clavier
    private void HandleKeyDown(KeyboardEventArgs e)
    {

        switch (e.Key)
        {
            case "ArrowLeft":
                game.GoLeft(game);
                break;
            case "ArrowRight":
                game.GoRight(game);
                break;
            case "ArrowUp":
                game.GoUp(game);
                break;
            case "ArrowDown":
                game.GoDown(game);
                break;
        }
        game.GameMap.UpdateMapDisplay(game.Player);
    }

    
}