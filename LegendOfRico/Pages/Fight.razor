@using LegendOfRico.Data
@using BootstrapBlazor

<div class="displayGame">
    <GameMenu Game="Game" TypeOfShowChange="TypeOfShowChange" />
    <div class="fight">
        
        <div class="fightBox">
            <p>
                @Game.FightMessage
                <button @onclick="Victory" style="display: @(Game.MonsterDead ? "block" : "none")">Valider</button>
                <button @onclick="Defeat" style="display: @(Game.PlayerDead ? "block" : "none")">Se réveiller difficilement</button>
            </p>
        </div>
        <div class="fightDisplay" style="background-image: url('@Game.GameMap.MapLayout[Game.Player.PositionI][Game.Player.PositionJ].SquareBiome.FightUrl');">
            <div class="opponent">
                <div class="spriteFlex"><img class="sprite" src="@Game.MonsterFight.fightImgUrl" alt="Image fight Monster"></div>
                <div class="stats">
                    <div class="HPBar"><p>@Game.MonsterFight.MonsterCurrentHP / @Game.MonsterFight.MonsterHP</p></div>
                    <div class="Name"><p>@Game.MonsterFight.MonsterName</p></div>
                </div>
                
            </div>
            <div class="player">
                <div class="playerpetdisplay">
                    <div class="spriteFlex"><img class="sprite" src="@Game.Player.fightImgUrl" alt="Image fight Player"></div>
                    @if (Game.Player.GetType() == typeof(Ranger))
                    {
                        <div class="spritepet"><img src="@Game.Player.Pet.fightImgUrl" alt="votre pet" /></div>
                    }
                </div>
                <div class="stats">
                    <div class="Name"><p>@Game.Player.Name</p></div>
                    <div class="HPBar">@Game.Player.CurrentHitPoints / @Game.Player.MaxHitPoints</div>
                </div>
                
            </div>
        </div>
        @if (!@Game.MonsterDead && !Game.PlayerDead)
        {
            <div class="fightMenu">
                <div class="actions">
                    @if (Game.ShowFightSpells)
                    {
                        <button @onclick="() => Game.UseWeapon(Game.MonsterFight, Game)">@Game.Player.CharacterWeapon.ItemName</button>
                        @foreach (var spell in Game.Player.SpellBook)
                        {
                            <button @onclick="() => Game.Action(spell, Game)">@spell.SpellName</button>
                        }
                        <button @onclick="Game.SwitchFightInventory">go to inventaire</button>
                    }
                    else if (Game.ShowFightInventory)
                    {
                        @foreach (var item in Game.Player.ConsumableInventory)
                        {
                            @if (item.Quantity > 0)
                            {
                                <button @onclick="() => item.Use(Game)">@item.ItemName ( @item.Quantity )</button>
                            }
                        }
                        <button @onclick="Game.SwitchFightSpells">go to spells</button>
                    }


            </div>
        </div>
        }
     
    </div>

</div>

@code {
    [Parameter]
    public Game Game { get; set; }
    [Parameter]
    public EventCallback TypeOfShowChange { get; set; }

    void Victory()
    {
        Game.FormShow = TypeOfShow.Map;
        Game.MonsterDead = false;
        TypeOfShowChange.InvokeAsync();
    }

    void Defeat()
    {
        Game.FormShow = TypeOfShow.Map;
        Game.PlayerDead = false;
        Game.Player.Rest();
        Game.GameMap.UpdateMapDisplay(Game.Player);
        TypeOfShowChange.InvokeAsync();
    }
}
